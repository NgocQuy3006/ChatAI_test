from flask import Blueprint, request, jsonify, session, current_app, url_for
from datetime import datetime
import os
import requests
from dotenv import load_dotenv
from db import SessionLocal
from models import Conversation, Message
from werkzeug.utils import secure_filename

# =======================================================
# ‚öôÔ∏è C·∫•u h√¨nh API
# =======================================================
load_dotenv()
print("üîë OPENROUTER_API_KEY =", os.getenv("OPENROUTER_API_KEY"))
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
API_URL = "https://openrouter.ai/api/v1/chat/completions"

chat_bp = Blueprint("chat_bp", __name__)

# =======================================================
# üí¨ Chat API ch√≠nh
# =======================================================
@chat_bp.route("/chat", methods=["POST"])
def chat():
    user_msg = request.json.get("message", "").strip()
    is_new_chat = request.json.get("new_chat", False)
    if not user_msg:
        return jsonify({"error": "Message cannot be empty"}), 400

    db = SessionLocal()
    conv_id = session.get("conversation_id")

    # N·∫øu l√† chat m·ªõi ‚Üí ƒë√≥ng cu·ªôc c≈©
    if is_new_chat and conv_id:
        old_conv = db.query(Conversation).get(conv_id)
        if old_conv:
            old_conv.ended_at = datetime.now()
        session.pop("conversation_id", None)
        session.pop("history", None)
        db.commit()

    # N·∫øu ch∆∞a c√≥ cu·ªôc h·ªôi tho·∫°i ‚Üí t·∫°o m·ªõi
    if not session.get("conversation_id"):
        new_conv = Conversation()
        db.add(new_conv)
        db.commit()
        session["conversation_id"] = new_conv.id
        session["history"] = []

    conv_id = session["conversation_id"]
    history = session["history"]

    # L∆∞u tin nh·∫Øn user
    user_msg_db = Message(role="user", content=user_msg, conversation_id=conv_id)
    db.add(user_msg_db)
    db.commit()

    history.append({
        "role": "user",
        "content": user_msg,
        "timestamp": datetime.now().strftime("%H:%M:%S")
    })

    # üß† G·ªçi OpenRouter API
    try:
        short_history = history[-10:]  # gi·ªØ l·ªãch s·ª≠ g·ªçn nh·∫π

        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json",
            "Referer": "http://localhost:5000",  # ‚ö†Ô∏è S·ª≠a ƒë√∫ng key Referer
            "X-Title": "My GPT App"
        }

        data = {
            "model": "openai/gpt-4o-mini",  # ‚úÖ model nh·∫π, ·ªïn ƒë·ªãnh
            "max_tokens": 600,
            "messages": (
                [{"role": "system", "content": "You are a helpful assistant."}]
                + [{"role": m["role"], "content": m["content"]} for m in short_history]
            ),
        }

        res = requests.post(API_URL, headers=headers, json=data, timeout=60)
        print("üîç API response:", res.status_code, res.text)
        res_json = res.json()

        # ‚úÖ N·∫øu API kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£ h·ª£p l·ªá
        if "choices" not in res_json:
            print("‚ùå L·ªói API:", res_json)
            ai_reply = (
                f"L·ªói t·ª´ OpenRouter ({res.status_code}): "
                f"{res_json.get('error', {}).get('message', str(res_json))}"
            )
        else:
            ai_reply = res_json["choices"][0]["message"]["content"].strip()

    except requests.exceptions.RequestException as e:
        ai_reply = f"L·ªói m·∫°ng khi g·ªçi API: {e}"

    except Exception as e:
        ai_reply = f"L·ªói khi g·ªçi API: {e}"

    # L∆∞u ph·∫£n h·ªìi AI
    ai_msg_db = Message(role="assistant", content=ai_reply, conversation_id=conv_id)
    db.add(ai_msg_db)
    db.commit()

    history.append({
        "role": "assistant",
        "content": ai_reply,
        "timestamp": datetime.now().strftime("%H:%M:%S")
    })
    session["history"] = history
    session.modified = True

    db.close()
    return jsonify({"history": history, "conversation_id": conv_id})


# =======================================================
# üìú Danh s√°ch c√°c cu·ªôc h·ªôi tho·∫°i
# =======================================================
@chat_bp.route("/conversations", methods=["GET"])
def list_conversations():
    db = SessionLocal()
    conversations = db.query(Conversation).order_by(Conversation.id.desc()).all()
    data = [
        {
            "id": c.id,
            "title": f"Cu·ªôc tr√≤ chuy·ªán #{c.id}",
            "created_at": c.created_at.strftime("%H:%M:%S"),
            "ended_at": c.ended_at.strftime("%H:%M:%S") if c.ended_at else None,
        }
        for c in conversations
    ]
    db.close()
    return jsonify(data)


# =======================================================
# üíæ L·∫•y to√†n b·ªô tin nh·∫Øn c·ªßa 1 cu·ªôc h·ªôi tho·∫°i
# =======================================================
@chat_bp.route("/messages/<int:conv_id>", methods=["GET"])
def get_messages(conv_id):
    db = SessionLocal()
    messages = db.query(Message).filter(Message.conversation_id == conv_id).order_by(Message.id).all()
    data = [{"role": m.role, "content": m.content, "timestamp": m.timestamp.strftime("%H:%M:%S")} for m in messages]
    db.close()
    return jsonify(data)


# =======================================================
# üñºÔ∏è Upload + h·ªèi ·∫£nh (Vision)
# =======================================================
ALLOWED_EXT = {"png", "jpg", "jpeg"}

def allowed_file(filename):
    return "." in filename and filename.rsplit(".", 1)[1].lower() in ALLOWED_EXT


@chat_bp.route("/upload-image", methods=["POST"])
def upload_image():
    if "image" not in request.files:
        return jsonify({"error": "Kh√¥ng c√≥ file"}), 400
    f = request.files["image"]
    if f.filename == "":
        return jsonify({"error": "Ch∆∞a ch·ªçn file"}), 400
    if not allowed_file(f.filename):
        return jsonify({"error": "Ch·ªâ ch·∫•p nh·∫≠n PNG/JPG"}), 400

    filename = secure_filename(f.filename)
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S%f")
    name, ext = os.path.splitext(filename)
    filename = f"{name}_{timestamp}{ext}"
    save_path = os.path.join(current_app.config["UPLOAD_FOLDER"], filename)
    f.save(save_path)

    session["uploaded_image"] = filename
    session.modified = True
    img_url = url_for("static", filename=f"uploads/{filename}", _external=True)
    return jsonify({"filename": filename, "url": img_url})


@chat_bp.route("/image-question", methods=["POST"])
def image_question():
    question = (request.json or {}).get("question", "").strip()
    if not question:
        return jsonify({"error": "C√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"}), 400

    filename = session.get("uploaded_image")
    if not filename:
        return jsonify({"error": "Ch∆∞a upload ·∫£nh n√†o"}), 400

    # ƒê∆∞·ªùng d·∫´n th·∫≠t c·ªßa ·∫£nh
    img_path = os.path.join(current_app.config["UPLOAD_FOLDER"], filename)

    # Chuy·ªÉn ·∫£nh sang base64 ƒë·ªÉ OpenRouter x·ª≠ l√Ω tr·ª±c ti·∫øp
    import base64
    with open(img_path, "rb") as f:
        img_b64 = base64.b64encode(f.read()).decode("utf-8")

    db = SessionLocal()
    conv_id = session.get("conversation_id")
    if not conv_id:
        new_conv = Conversation()
        db.add(new_conv)
        db.commit()
        session["conversation_id"] = new_conv.id
        session["history"] = []
        conv_id = new_conv.id

    # L∆∞u c√¢u h·ªèi ng∆∞·ªùi d√πng
    user_msg = Message(role="user", content=f"[H·ªèi ·∫£nh] {question}", conversation_id=conv_id)
    db.add(user_msg)
    db.commit()

    try:
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json",
            "Referer": "http://localhost:5000",
            "X-Title": "My GPT App",
        }

        data = {
            "model": "openai/gpt-4o-mini",  # ‚úÖ nh·∫π, ·ªïn ƒë·ªãnh h∆°n gpt-4o
            "max_tokens": 800,
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": question},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{img_b64}"
                            },
                        },
                    ],
                }
            ],
        }

        res = requests.post(API_URL, headers=headers, json=data, timeout=60)
        res_json = res.json()

        if "choices" not in res_json:
            print("‚ùå L·ªói API:", res_json)
            answer = f"L·ªói API tr·∫£ v·ªÅ: {res_json.get('error', {}).get('message', res_json)}"
        else:
            answer = res_json["choices"][0]["message"]["content"].strip()

    except Exception as e:
        answer = f"L·ªói khi g·ªçi API: {e}"

    # L∆∞u ph·∫£n h·ªìi AI
    ai_msg = Message(role="assistant", content=f"[·∫¢nh] {answer}", conversation_id=conv_id)
    db.add(ai_msg)
    db.commit()
    db.close()

    # URL ·∫£nh ƒë·ªÉ hi·ªÉn th·ªã l·∫°i trong frontend
    img_url = url_for("static", filename=f"uploads/{filename}", _external=True)

    return jsonify({"reply": answer, "image_url": img_url})
